package com.lyc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyc.callerinfo.model.db.MarkedRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKED_RECORD".
*/
public class MarkedRecordDao extends AbstractDao<MarkedRecord, Long> {

    public static final String TABLENAME = "MARKED_RECORD";

    /**
     * Properties of entity MarkedRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
        public final static Property Source = new Property(6, int.class, "source", false, "SOURCE");
        public final static Property Reported = new Property(7, boolean.class, "reported", false, "REPORTED");
        public final static Property TypeName = new Property(8, String.class, "typeName", false, "TYPE_NAME");
    }


    public MarkedRecordDao(DaoConfig config) {
        super(config);
    }
    
    public MarkedRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKED_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NUMBER\" TEXT," + // 1: number
                "\"UID\" TEXT," + // 2: uid
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"COUNT\" INTEGER NOT NULL ," + // 5: count
                "\"SOURCE\" INTEGER NOT NULL ," + // 6: source
                "\"REPORTED\" INTEGER NOT NULL ," + // 7: reported
                "\"TYPE_NAME\" TEXT);"); // 8: typeName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKED_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkedRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getSource());
        stmt.bindLong(8, entity.getReported() ? 1L: 0L);
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(9, typeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkedRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getSource());
        stmt.bindLong(8, entity.getReported() ? 1L: 0L);
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(9, typeName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MarkedRecord readEntity(Cursor cursor, int offset) {
        MarkedRecord entity = new MarkedRecord( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.getInt(offset + 3), // type
            cursor.getLong(offset + 4), // time
            cursor.getInt(offset + 5), // count
            cursor.getInt(offset + 6), // source
            cursor.getShort(offset + 7) != 0, // reported
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // typeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkedRecord entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
        entity.setSource(cursor.getInt(offset + 6));
        entity.setReported(cursor.getShort(offset + 7) != 0);
        entity.setTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarkedRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarkedRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarkedRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
