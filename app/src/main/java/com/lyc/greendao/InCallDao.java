package com.lyc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyc.callerinfo.model.db.InCall;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN_CALL".
*/
public class InCallDao extends AbstractDao<InCall, Long> {

    public static final String TABLENAME = "IN_CALL";

    /**
     * Properties of entity InCall.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property RingTime = new Property(3, long.class, "ringTime", false, "RING_TIME");
        public final static Property Duration = new Property(4, long.class, "duration", false, "DURATION");
        public final static Property IsExpanded = new Property(5, boolean.class, "isExpanded", false, "IS_EXPANDED");
    }


    public InCallDao(DaoConfig config) {
        super(config);
    }
    
    public InCallDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN_CALL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NUMBER\" TEXT," + // 1: number
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"RING_TIME\" INTEGER NOT NULL ," + // 3: ringTime
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"IS_EXPANDED\" INTEGER NOT NULL );"); // 5: isExpanded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN_CALL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InCall entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getRingTime());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getIsExpanded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InCall entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getRingTime());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getIsExpanded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public InCall readEntity(Cursor cursor, int offset) {
        InCall entity = new InCall( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.getLong(offset + 2), // time
            cursor.getLong(offset + 3), // ringTime
            cursor.getLong(offset + 4), // duration
            cursor.getShort(offset + 5) != 0 // isExpanded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InCall entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setRingTime(cursor.getLong(offset + 3));
        entity.setDuration(cursor.getLong(offset + 4));
        entity.setIsExpanded(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InCall entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InCall entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InCall entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
